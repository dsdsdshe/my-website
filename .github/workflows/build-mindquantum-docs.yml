name: Build and Deploy MindQuantum Docs

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Checkout MindSpore docs (primary from Gitee, fallback GitHub)
        run: |
          set -euxo pipefail
          git clone --depth 1 https://gitee.com/mindspore/docs.git mindspore-docs \
          || git clone --depth 1 https://github.com/mindspore-ai/docs.git mindspore-docs

      - name: Checkout MindQuantum repo for API sources (primary from Gitee, fallback GitHub)
        run: |
          set -euxo pipefail
          git clone --depth 1 https://gitee.com/mindspore/mindquantum.git mindquantum \
          || git clone --depth 1 https://github.com/mindspore-lab/mindquantum.git mindquantum

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Sphinx dependencies
        run: |
          set -euxo pipefail
          pip install --upgrade pip
          # Install exact versions compatible with the MindQuantum docs
          pip install -r mindspore-docs/docs/mindquantum/docs/requirements.txt
          # Add notebook support without upgrading Sphinx beyond 4.x
          pip install 'nbsphinx==0.8.9' 'ipython==8.12.3'
          # Re-pin core packages in case dependencies tried to upgrade them
          pip install --no-deps 'sphinx==4.4.0' 'docutils==0.17.1' 'sphinx_rtd_theme==1.0.0' 'myst-parser==0.18.1'
          # Ensure Sphinx 4.x compatible sphinxcontrib packages
          pip install 'sphinxcontrib-applehelp<2' 'sphinxcontrib-devhelp<2' 'sphinxcontrib-htmlhelp<2' 'sphinxcontrib-qthelp<2' 'sphinxcontrib-serializinghtml<2'

      - name: Install pandoc (for nbsphinx)
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      - name: Show tool versions
        run: |
          python -V
          pip --version
          python - <<'PY'
          import sys, pkgutil
          import importlib
          for m in ['sphinx','docutils','myst_parser','sphinx_rtd_theme','nbsphinx','IPython']:
              try:
                  mod = importlib.import_module(m)
                  ver = getattr(mod, '__version__', 'unknown')
                  print(f"{m}: {ver}")
              except Exception as e:
                  print(f"{m}: not importable ({e})")
          PY

      - name: Patch MindQuantum Sphinx config to be resilient
        run: |
          set -euxo pipefail
          python - <<'PY'
          import io, os, re

          def patch_file(path):
              with io.open(path, 'r', encoding='utf-8') as f:
                  src = f.read()

              # 1) Guard import mindquantum
              src = src.replace(
                  '\nimport mindquantum\n',
                  '\ntry:\n    import mindquantum\nexcept Exception:\n    mindquantum = None\n',
              )

              # 2) Guard MQ_PATH joins
              src = src.replace(
                  "os.path.join(os.getenv(\"MQ_PATH\"), 'docs/api_python_en')",
                  "os.path.join(os.getenv(\"MQ_PATH\") or '', 'docs/api_python_en')",
              )
              src = src.replace(
                  "os.path.join(os.getenv(\"MQ_PATH\"), copy_path)",
                  "os.path.join(os.getenv(\"MQ_PATH\") or '', copy_path)",
              )

              # 3) Guard directory iteration
              src = src.replace(
                  'for i in os.listdir(src_dir):',
                  'for i in (os.listdir(src_dir) if (src_dir and os.path.isdir(src_dir)) else []):',
              )

              # 4) Make copy_repo robust when MQ_PATH is empty
              copy_repo_pattern = re.compile(
                  r"if os\.getenv\(\"MQ_PATH\"\)\.split\('/'\)\[-1\]:\n\s*copy_repo = os\.getenv\(\"MQ_PATH\"\)\.split\('/'\)\[-1\]\nelse:\n\s*copy_repo = os\.getenv\(\"MQ_PATH\"\)\.split\('/'\)\[-2\]",
                  re.M,
              )
              src = copy_repo_pattern.sub(
                  "mq_path = os.getenv(\"MQ_PATH\") or ''\nparts = [p for p in mq_path.split('/') if p]\ncopy_repo = parts[-1] if parts else 'mindquantum'",
                  src,
              )

              # 5) In EN conf, wrap theme layout copy in try/except (if present)
              src = src.replace(
                  'import sphinx_rtd_theme\nlayout_target = os.path.join(os.path.dirname(sphinx_rtd_theme.__file__), \'layout.html\')\nlayout_src = \'../../../../resource/_static/layout.html\'\nif os.path.exists(layout_target):\n    os.remove(layout_target)\nshutil.copy(layout_src, layout_target)\n',
                  'try:\n    import sphinx_rtd_theme\n    layout_target = os.path.join(os.path.dirname(sphinx_rtd_theme.__file__), \'layout.html\')\n    layout_src = \'../../../../resource/_static/layout.html\'\n    if os.path.exists(layout_target):\n        os.remove(layout_target)\n    shutil.copy(layout_src, layout_target)\nexcept Exception:\n    pass\n',
              )

              with io.open(path, 'w', encoding='utf-8') as f:
                  f.write(src)

          for p in [
              'mindspore-docs/docs/mindquantum/docs/source_en/conf.py',
              'mindspore-docs/docs/mindquantum/docs/source_zh_cn/conf.py',
          ]:
              patch_file(p)
          PY

      - name: Build Sphinx HTML (EN + ZH)
        env:
          MQ_PATH: ${{ github.workspace }}/mindquantum
        run: |
          set -euxo pipefail
          BUILD_DIR=_site
          mkdir -p "$BUILD_DIR/en" "$BUILD_DIR/zh-cn"
          sphinx-build -b html mindspore-docs/docs/mindquantum/docs/source_en "$BUILD_DIR/en"
          sphinx-build -b html mindspore-docs/docs/mindquantum/docs/source_zh_cn "$BUILD_DIR/zh-cn"
          # Add a root redirect to English by default
          cat > "$BUILD_DIR/index.html" <<'HTML'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="utf-8" />
            <meta http-equiv="refresh" content="0; url=./en/index.html" />
            <title>Redirecting…</title>
          </head>
          <body>
            <p>Redirecting to <a href="./en/index.html">English docs</a>…</p>
          </body>
          </html>
          HTML

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
